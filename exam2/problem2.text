problem2.text
Copyright 2016 陈睿超 (Chen Ruichao) <sheep0x@berkeley.edu>
This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/.

基础考试2
考试时间：2016年10月15日 15:40-17:40

题目名称        阶乘和          矩形求和        最大公约数      培养皿
提交文件名      facsum.cpp      rect.cpp        gcd.cpp        healthier.cpp
输入文件名      无（标准输入）  无（标准输入）  无（标准输入）  无（标准输入）
输出文件名      无（标准输出）  无（标准输出）  无（标准输出）  无（标准输出）
每个测试点时限  1秒             1秒             1秒             1秒
内存限制        512 MiB         512 MiB         512 MiB         512 MiB
测试点数目      10              10              10              10
每个测试点分值  10              10              10              10

评测环境：
操作系统：Ubuntu 14.04 LTS (Linux 3.13 x86_64)
CPU：Intel Core i7 3.40 GHz
内存：31.4 GiB
编译器：GNU G++ 4.8.4
评测器：Lemon v1.1正式版
评测时所有编译命令均不打开任何优化开关。










阶乘和

题目描述
    给定n、m，求(1! + 2! + 3! + ... + n!) mod m。

输入格式
    仅一行，两个整数n、m。

输出格式
    仅一行，一个整数，表示答案。

样例输入
    5 30

样例输出
    3

样例解释
    1! + 2! + 3! + 4! + 5! = 1 + 2 + 6 + 24 + 120 = 153
    153 mod 30 = 3

数据范围
    对于20%的数据，1 ≤ n ≤ 10000
    对于100%的数据，1 ≤ n ≤ 1000000，1 ≤ m ≤ 2147483647

注
    本题可能需要64位整数。C++中可以使用long long表示。
    例：
    #include <iostream>
    using namespace std;
    int main()
    {
        long long a, b;
        cin >> a >> b;
        cout << a+b << endl;
        return 0;
    }




16! mod 23
13

15! mod 23
8 




矩形求和

题目描述
    给出一个n行m列的数字矩阵，以及q个询问。对于每个询问，求出一个子矩阵中的数字之和。

输入格式
    第一行三个整数n、m、q。
    接下来n行，每行m个整数，表示矩阵中的数字。
    接下来q行，每行四个整数a,b,c,d，表示一个从第a行第b列开始到第c行第d列的子矩阵（矩阵左上角为第1行第1列）。

输出格式
    q行，每行一个整数，依序表示每个询问的结果。
    由于答案可能很大，只需输出答案 mod 1234之后的结果。

样例输入
    4 4 3
    4 2 6 3
    3 9 1 3
    4 5 7 8
    6 0 1 0
    1 1 4 4
    3 3 3 3
    2 2 3 4

样例输出
    62
    7
    33

样例解释
    第一个询问输出整个矩阵之和。
    第二个询问输出第三行第三列的数字。
    第三个询问输出子矩阵 9 1 3 的和。
                      5 7 8

数据范围
    对于20%的数据， 1 ≤ n,m ≤ 10，1 ≤ q ≤ 100
    对于40%的数据， 1 ≤ n,m ≤ 10
    对于100%的数据，1 ≤ n,m ≤ 1000，1 ≤ q ≤ 100000，矩阵中数字的绝对值 ≤ 300

Note：
1. 1一次常数操作
2. 10^8 是一秒
3. 有没有矩阵的pre-ordersum：
有，以0点为左上角，n，m为右下角
nm 和 ab 组成的矩阵和为
n，m + a，b  - n，b - a，m  








最大公约数

题目描述
    给出n个正整数a1, a2, a3, ..., an，求出gcd(a1, a2, ..., an)。

输入格式
    共两行。第一行一个整数n。第二行n个整数，表示a1, a2, ..., an。

输出格式
    仅一行，一个整数，表示gcd(a1, a2, ..., an)。

样例输入
    3
    45 30 105

样例输出
    15

样例解释
    15是最大的能够同时整除45、30、105的数。

数据范围
    对于20%的数据，1 ≤ n ≤ 2
    对于30%的数据，1 ≤ n ≤ 3
    对于100%的数据，1 ≤ n ≤ 10000










培养皿2

题目描述
    有些人从来不洗碗，绵羊很桑心。。。

    洗碗槽里有一些盘子，每个盘子带有一定数量的细菌。细菌每天都会分裂，分裂后数量是原来的k倍。比如今天盘子里有3个细菌，明天盘子里就会有3k个细菌，后天就会有3k^2个细菌。不同的细菌有不同的k值。有趣的是，同一个盘子里的细菌k值总是相同。

    公寓的洗碗槽今天也充满生机。绵羊想知道d天之后洗碗槽里会有多少细菌。你可以假定这d天之内不会有新的盘子进入洗碗槽，也不会有盘子被取出。

    咦？似曾相识。

输入格式
    第一行两个整数n,d，分别表示表示盘子数和天数。
    接下来n行，每行两个整数ci,ki，表示第i个盘子的初始细菌数量和细菌分裂的倍数。

输出格式
    一行，一个整数，表示d天后细菌总数。由于这个数字可能很大，你只需要输出mod 4后的值。

样例输入
    3 3
    5 2
    1 4
    3 3

样例输出
    1

样例解释
    一开始三个盘子的细菌数量分别为5, 1, 3。一天后变为10, 4, 9，两天后变为20, 16, 27，三天后变为40, 64, 81。三天后细菌总数为40+64+81 = 185，185 mod 4 = 1。

数据范围
    对于20%的数据，n=1
    对于另外20%的数据，1 ≤ d ≤ 100, 1 ≤ ci,ki ≤ 20
    对于100%的数据，
    1 ≤ n ≤ 50000
    0 ≤ d,ci,ki ≤ 10^9